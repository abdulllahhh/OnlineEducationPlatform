@model OnlineEducationPlatform.Web.ViewModels.ExamViewModel
@{
    ViewData["Title"] = "Edit Exam";
}

<div asp-validation-summary="All" class="alert alert-danger"></div>

<div class="row justify-content-center" style="min-height: 70vh;">
    <form asp-action="Edit" method="post" onsubmit="reindexQuestions()" class="row w-100">
        <div class="col-md-5">
            <div class="card shadow p-4 mb-4" style="background: #f9fafc; border-radius: 1.5rem;">
                <h2 class="mb-4 text-primary">Edit Exam</h2>
                <input type="hidden" asp-for="ExamId" />
                <div class="mb-3">
                    <label asp-for="Title" class="form-label text-secondary"></label>
                    <input asp-for="Title" class="form-control" />
                    <span asp-validation-for="Title" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="Instructions" class="form-label text-secondary"></label>
                    <textarea asp-for="Instructions" class="form-control"></textarea>
                </div>
                <div class="mb-3">
                    <label asp-for="AvailableFrom" class="form-label text-secondary"></label>
                    <input asp-for="AvailableFrom" type="datetime-local" class="form-control" />
                </div>
                <div class="mb-3">
                    <label asp-for="AvailableTo" class="form-label text-secondary"></label>
                    <input asp-for="AvailableTo" type="datetime-local" class="form-control" />
                </div>
                <div class="mb-3">
                    <label asp-for="TimeLimitMinutes" class="form-label text-secondary"></label>
                    <input asp-for="TimeLimitMinutes" class="form-control" />
                </div>
                <div class="mb-3">
                    <label asp-for="PassingScore" class="form-label text-secondary"></label>
                    <input asp-for="PassingScore" class="form-control" />
                </div>
                <div class="mb-3">
                    <label asp-for="ClassId" class="form-label text-secondary"></label>
                    <select asp-for="ClassId" asp-items="Model.Classes" class="form-control" id="classSelect"></select>
                </div>
                <div class="mb-3">
                    <label asp-for="SubjectId" class="form-label text-secondary"></label>
                    <select asp-for="SubjectId" asp-items="Model.Subjects" class="form-control" id="subjectSelect"></select>
                </div>
                <button type="submit" class="btn btn-primary w-100 mt-4">Save Changes</button>
                <a asp-action="Index" class="btn btn-outline-secondary w-100 mt-2">Cancel</a>
            </div>
        </div>
        <div class="col-md-7">
            <div class="card shadow p-4 mt-4 mt-md-0" style="background: #f9fafc; border-radius: 1.5rem;">
                <h4 class="text-primary mb-3">Questions</h4>
                <div id="questions-container"></div>
                <button type="button" class="btn btn-outline-secondary w-100" onclick="addQuestion()">Add Question</button>
            </div>
        </div>
    </form>
</div>
@section Scripts {
    <script>
        let questionIndex = 0;
        
        @if (Model.Questions != null)
        {
            foreach (var q in Model.Questions)
            {
                <text>
                addQuestionFromModel(@Html.Raw(Json.Serialize(q)));
                </text>
            }
        }

        function addQuestionFromModel(q) {
            const container = document.getElementById("questions-container");
            const qId = `question-card-${Date.now()}-${Math.floor(Math.random()*10000)}`;
            let html = `
                <div class="card mb-3 p-3 border position-relative" id="${qId}">
                    <button type="button" class="btn-close position-absolute top-0 end-0 m-2" aria-label="Remove" onclick="removeQuestion('${qId}')"></button>
                    <h5 class="question-number">Question</h5>
                    <input type="hidden" class="question-id" value="${q.questionId}" />
                    <div class="mb-2">
                        <label>Text</label>
                        <input class="form-control question-text" value="${q.text}" required />
                    </div>
                    <div class="mb-2">
                        <label>Points</label>
                        <input type="number" class="form-control question-points" value="${q.points}" required />
                    </div>
                    <div class="mb-2">
                        
                        <div class="question-options">
                            <button type="button" class="btn btn-secondary add-option-btn mb-2">Add Option</button>
                            `;
                            for (let i = 0; i < q.options.length; i++) {
                                html += `
                                    <div class="input-group mb-1">
                                        <input class="form-control question-option" value="${q.options[i]}" />
                                    </div>
                                `;
                            }
                            html += `
                            
                        </div>
                    </div>
                    <div class="mb-2">
                        <label>Correct Answer</label>
                        <input class="form-control question-correct" value="${q.correctAnswer}" required />
                    </div>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', html);
            questionIndex++;
            renumberQuestions();
            reindexQuestions();
        }

        function addQuestion() {
            addQuestionFromModel({ questionId: 0, text: "", points: 1, options: [""], correctAnswer: "" });
        }

        function removeQuestion(qId) {
            const qCard = document.getElementById(qId);
            if (qCard) qCard.remove();
            renumberQuestions();
            reindexQuestions();
        }

        function renumberQuestions() {
            const cards = document.querySelectorAll('#questions-container .card');
            cards.forEach((card, idx) => {
                const number = card.querySelector('.question-number');
                if (number) number.textContent = `Question #${idx + 1}`;
            });
        }

        function reindexQuestions() {
            const cards = document.querySelectorAll('#questions-container .card');
            cards.forEach((card, idx) => {
                // QuestionId (hidden)
                const qid = card.querySelector('.question-id');
                if (qid) qid.setAttribute('name', `Questions[${idx}].QuestionId`);
                // Text
                const text = card.querySelector('.question-text');
                if (text) text.setAttribute('name', `Questions[${idx}].Text`);
                // Points
                const points = card.querySelector('.question-points');
                if (points) points.setAttribute('name', `Questions[${idx}].Points`);
                // Correct Answer
                const correct = card.querySelector('.question-correct');
                if (correct) correct.setAttribute('name', `Questions[${idx}].CorrectAnswer`);
                // Options
                const optionsDiv = card.querySelector('.question-options');
                if (optionsDiv) {
                    const options = optionsDiv.querySelectorAll('.question-option');
                    options.forEach((opt, oidx) => {
                        opt.setAttribute('name', `Questions[${idx}].Options[${oidx}]`);
                    });
                    // Add option button
                    const addBtn = optionsDiv.querySelector('.add-option-btn');
                    if (addBtn) {
                        addBtn.onclick = function() {
                            addOption(idx, optionsDiv);
                        };
                    }
                }
            });
        }

        function addOption(qIdx, optionsDiv) {
            const optionCount = optionsDiv.querySelectorAll('.question-option').length;
            const optionInput = `
                <div class="input-group mb-1">
                    <input class="form-control question-option" required />
                </div>
            `;
            optionsDiv.insertAdjacentHTML('beforeend', optionInput);
            reindexQuestions();
        }

        function updateSubjectsForClass(classId, selectedSubjectId) {
            fetch('/Exam/GetSubjectsForClass?classId=' + classId)
                .then(response => response.json())
                .then(subjects => {
                    var subjectSelect = document.getElementById('subjectSelect');
                    subjectSelect.innerHTML = '';
                    subjects.forEach(function(subj) {
                        var opt = document.createElement('option');
                        opt.value = subj.subjectId;
                        opt.textContent = subj.name;
                        if (selectedSubjectId && subj.subjectId == selectedSubjectId) {
                            opt.selected = true;
                        }
                        subjectSelect.appendChild(opt);
                    });
                });
        }
        document.getElementById('classSelect').addEventListener('change', function() {
            updateSubjectsForClass(this.value);
        });
        // On page load, filter subjects for the initial class
        document.addEventListener('DOMContentLoaded', function() {
            var classSelect = document.getElementById('classSelect');
            var subjectSelect = document.getElementById('subjectSelect');
            var selectedSubjectId = subjectSelect.value;
            if (classSelect.value) {
                updateSubjectsForClass(classSelect.value, selectedSubjectId);
            } else {
                subjectSelect.innerHTML = '';
            }
        });
    </script>
}
