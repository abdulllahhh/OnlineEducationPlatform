@model OnlineEducationPlatform.Web.ViewModels.ExamViewModel

@{
    ViewData["Title"] = "Create Exam";
}

@if (!ViewData.ModelState.IsValid && ViewData.ModelState.Values.Any(v => v.Errors.Count > 0))
{
    <div asp-validation-summary="All" class="alert alert-danger"></div>
}

<div class="row justify-content-center" style="min-height: 70vh;">
    <form asp-action="Create" method="post" onsubmit="reindexQuestions()" class="row w-100">
        <div class="col-md-5">
            <div class="card shadow p-4 mb-4" style="background: #f9fafc; border-radius: 1.5rem;">
                <h2 class="mb-4 text-primary">Create Exam</h2>
                <div class="mb-3">
                    <label class="form-label text-secondary">Title</label>
                    <input asp-for="Title" class="form-control" />
                </div>
                <div class="mb-3">
                    <label class="form-label text-secondary">Instructions</label>
                    <textarea asp-for="Instructions" class="form-control"></textarea>
                </div>
                <div class="mb-3">
                    <label class="form-label text-secondary">Available From</label>
                    <input asp-for="AvailableFrom" type="datetime-local" class="form-control"
                        value="@(Model.AvailableFrom == DateTime.MinValue ? DateTime.Now.ToString("yyyy-MM-ddTHH:mm") : Model.AvailableFrom.ToString("yyyy-MM-ddTHH:mm"))" />
                </div>
                <div class="mb-3">
                    <label class="form-label text-secondary">Available To</label>
                    <input asp-for="AvailableTo" type="datetime-local" class="form-control"
                        value="@(Model.AvailableTo == DateTime.MinValue ? DateTime.Now.ToString("yyyy-MM-ddTHH:mm") : Model.AvailableTo.ToString("yyyy-MM-ddTHH:mm"))" />
                </div>
                <div class="mb-3">
                    <label class="form-label text-secondary">Time Limit (minutes)</label>
                    <input asp-for="TimeLimitMinutes" type="number" class="form-control" />
                </div>
                <div class="mb-3">
                    <label class="form-label text-secondary">Passing Score</label>
                    <input asp-for="PassingScore" type="number" class="form-control" />
                </div>
                <div class="mb-3">
                    <label class="form-label text-secondary">Class</label>
                    <select asp-for="ClassId" asp-items="Model.Classes" class="form-select" id="classSelect"></select>
                </div>
                <div class="mb-3">
                    <label class="form-label text-secondary">Subject</label>
                    <select asp-for="SubjectId" asp-items="Model.Subjects" class="form-select" id="subjectSelect"></select>
                </div>
                <button type="submit" class="btn btn-primary w-100 mt-4">Save Exam</button>
                <a class="btn btn-secondary w-100 mt-2" asp-area="" asp-controller="Exam" asp-action="Index">Back to Exams</a>
            </div>
        </div>
        <div class="col-md-7">
            <div class="card shadow p-4 mt-4 mt-md-0" style="background: #f9fafc; border-radius: 1.5rem;">
                <h4 class="text-primary mb-3">Questions</h4>
                <div id="questions-container"></div>
                <button type="button" class="btn btn-outline-secondary w-100" onclick="addQuestion()">Add Question</button>
            </div>
        </div>
    </form>
</div>
@section Scripts {
    <script>
        let questionIndex = 0;

        function addQuestionFromModel(q) {
            const container = document.getElementById("questions-container");
            const qId = `question-card-${Date.now()}-${Math.floor(Math.random()*10000)}`;
            let html = `
                <div class="card p-3 mb-3 position-relative" id="${qId}">
                    <button type="button" class="btn-close position-absolute top-0 end-0 m-2" aria-label="Remove" onclick="removeQuestion('${qId}')"></button>
                    <h5 class="question-number">Question</h5>
                    <div class="mb-2">
                        <label>Text</label>
                        <input class="form-control question-text" value="${q.text}" required />
                    </div>
                    <div class="mb-2">
                        <label>Points</label>
                        <input type="number" class="form-control question-points" value="${q.points}" required />
                    </div>
                    <div class="mb-2">
                        <div class="question-options">
                            <button type="button" class="btn btn-secondary add-option-btn mb-2">Add Option</button>
            `;
            for (let i = 0; i < q.options.length; i++) {
                html += `
                    <div class="input-group mb-1">
                        <input class="form-control question-option" value="${q.options[i]}" required oninput="updateCorrectAnswerDropdown('${qId}')" />
                    </div>
                `;
            }
            html += `
                        </div>
                    </div>
                    <div class="mb-2">
                        <label>Correct Answer</label>
                        <select class="form-select question-correct" required></select>
                    </div>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', html);
            questionIndex++;
            renumberQuestions();
            reindexQuestions();
            updateCorrectAnswerDropdown(qId, q.correctAnswer);
        }

        function addQuestion() {
            addQuestionFromModel({ text: "", points: 1, options: ["", ""], correctAnswer: "" });
        }

        function removeQuestion(qId) {
            const qCard = document.getElementById(qId);
            if (qCard) qCard.remove();
            renumberQuestions();
            reindexQuestions();
        }

        function renumberQuestions() {
            const cards = document.querySelectorAll('#questions-container .card');
            cards.forEach((card, idx) => {
                const number = card.querySelector('.question-number');
                if (number) number.textContent = `Question #${idx + 1}`;
            });
        }

        function reindexQuestions() {
            const cards = document.querySelectorAll('#questions-container .card');
            cards.forEach((card, idx) => {
                // Text
                const text = card.querySelector('.question-text');
                if (text) text.setAttribute('name', `Questions[${idx}].Text`);
                // Points
                const points = card.querySelector('.question-points');
                if (points) points.setAttribute('name', `Questions[${idx}].Points`);
                // Correct Answer
                const correct = card.querySelector('.question-correct');
                if (correct) correct.setAttribute('name', `Questions[${idx}].CorrectAnswer`);
                // Options
                const optionsDiv = card.querySelector('.question-options');
                if (optionsDiv) {
                    const options = optionsDiv.querySelectorAll('.question-option');
                    options.forEach((opt, oidx) => {
                        opt.setAttribute('name', `Questions[${idx}].Options[${oidx}]`);
                    });
                    // Add option button
                    const addBtn = optionsDiv.querySelector('.add-option-btn');
                    if (addBtn) {
                        addBtn.onclick = function() {
                            addOption(idx, optionsDiv);
                        };
                    }
                }
            });
        }

        function addOption(qIdx, optionsDiv) {
            const optionCount = optionsDiv.querySelectorAll('.question-option').length;
            const optionInput = `
                <div class="input-group mb-1">
                    <input class="form-control question-option" required oninput="updateCorrectAnswerDropdown(this.closest('.card').id)" />
                </div>
            `;
            optionsDiv.insertAdjacentHTML('beforeend', optionInput);
            reindexQuestions();
            updateCorrectAnswerDropdown(optionsDiv.closest('.card').id);
        }

        function updateCorrectAnswerDropdown(qId, selectedValue) {
            const qCard = document.getElementById(qId);
            if (!qCard) return;
            const options = qCard.querySelectorAll('.question-option');
            const correctSelect = qCard.querySelector('.question-correct');
            if (!correctSelect) return;
            const currentValue = selectedValue !== undefined ? selectedValue : correctSelect.value;
            correctSelect.innerHTML = '';
            options.forEach(opt => {
                const val = opt.value;
                if (val.trim() !== "") {
                    const option = document.createElement('option');
                    option.value = val;
                    option.textContent = val;
                    if (val === currentValue) option.selected = true;
                    correctSelect.appendChild(option);
                }
            });
        }

        function updateSubjectsForClass(classId, selectedSubjectId) {
            fetch('/ClassSubject/GetSubjectsForClass?classId=' + classId)
                .then(response => response.json())
                .then(subjects => {
                    var subjectSelect = document.getElementById('subjectSelect');
                    subjectSelect.innerHTML = '';
                    subjects.forEach(function(subj) {
                        var opt = document.createElement('option');
                        opt.value = subj.subjectId;
                        opt.textContent = subj.name;
                        if (selectedSubjectId && subj.subjectId == selectedSubjectId) {
                            opt.selected = true;
                        }
                        subjectSelect.appendChild(opt);
                    });
                });
        }
        document.getElementById('classSelect').addEventListener('change', function() {
            updateSubjectsForClass(this.value);
        });
        // On page load, filter subjects for the initial class
        document.addEventListener('DOMContentLoaded', function() {
            var classSelect = document.getElementById('classSelect');
            var subjectSelect = document.getElementById('subjectSelect');
            var selectedSubjectId = subjectSelect.value;
            if (classSelect.value) {
                updateSubjectsForClass(classSelect.value, selectedSubjectId);
            } else {
                subjectSelect.innerHTML = '';
            }

            // Add this block to render all questions from the model after DOM and JS are ready
            @if (Model.Questions != null && Model.Questions.Count > 0)
            {
                foreach (var q in Model.Questions)
                {
                    <text>
                    addQuestionFromModel(@Html.Raw(Json.Serialize(q)));
                    </text>
                }
            }
        });
    </script>
}
